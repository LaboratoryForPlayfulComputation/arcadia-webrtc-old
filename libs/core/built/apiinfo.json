{
 "byQName": {
  "Array": {
   "kind": 5,
   "namespace": "",
   "name": "Array",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockNamespace": "Arrays",
    "paramHelp": {},
    "jsDoc": "Add, remove, and replace items in lists.\n\nAdd, remove, and replace items in lists.",
    "block": "Array"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "",
   "parameters": null,
   "qName": "Array"
  },
  "Array.length": {
   "kind": 2,
   "namespace": "Array",
   "name": "length",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Array_::length",
    "weight": 84,
    "blockId": "lists_length",
    "block": "length of %VALUE",
    "blockBuiltin": "true",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
    "_name": "length"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "Array.length"
  },
  "Array.push": {
   "kind": 1,
   "namespace": "Array",
   "name": "push",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/push",
    "shim": "Array_::push",
    "weight": 49,
    "blockId": "array_push",
    "block": "%list| add value %value| to end",
    "blockNamespace": "arrays",
    "paramHelp": {
     "items": "New elements of the Array."
    },
    "jsDoc": "Appends new elements to an array.",
    "_name": "push"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "item",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "push(null)",
   "qName": "Array.push"
  },
  "Array.pop": {
   "kind": 1,
   "namespace": "Array",
   "name": "pop",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/pop",
    "shim": "Array_::pop",
    "weight": 48,
    "blockId": "array_pop",
    "block": "get and remove last value from %list",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Removes the last element from an array and returns it.",
    "_name": "pop"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [],
   "snippet": "pop()",
   "qName": "Array.pop"
  },
  "Array.reverse": {
   "kind": 1,
   "namespace": "Array",
   "name": "reverse",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/reverse",
    "helper": "arrayReverse",
    "weight": 10,
    "advanced": true,
    "blockId": "array_reverse",
    "block": "reverse %list",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Reverses the elements in an Array. The first array element becomes the last, and the last array element becomes the first.",
    "_name": "reverse"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [],
   "snippet": "reverse()",
   "qName": "Array.reverse"
  },
  "Array.shift": {
   "kind": 1,
   "namespace": "Array",
   "name": "shift",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/shift",
    "helper": "arrayShift",
    "weight": 70,
    "advanced": true,
    "blockId": "array_shift",
    "block": "get and remove first value from %list",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Removes the first element from an array and returns that element. This method changes the length of the array.",
    "_name": "shift"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [],
   "snippet": "shift()",
   "qName": "Array.shift"
  },
  "Array.unshift": {
   "kind": 1,
   "namespace": "Array",
   "name": "unshift",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/unshift",
    "helper": "arrayUnshift",
    "weight": 69,
    "advanced": true,
    "blockId": "array_unshift",
    "block": "%list| insert %value| at beginning",
    "blockNamespace": "arrays",
    "paramHelp": {
     "element": "to insert at the start of the Array."
    },
    "jsDoc": "Adds one element to the beginning of an array and returns the new length of the array.",
    "_name": "unshift"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "value",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "unshift(null)",
   "qName": "Array.unshift"
  },
  "Array.slice": {
   "kind": 1,
   "namespace": "Array",
   "name": "slice",
   "attributes": {
    "paramDefl": {
     "start": "0",
     "end": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/slice",
    "helper": "arraySlice",
    "weight": 41,
    "advanced": true,
    "blockNamespace": "arrays",
    "paramHelp": {
     "start": "The beginning of the specified portion of the array. eg: 0",
     "end": "The end of the specified portion of the array. eg: 0"
    },
    "jsDoc": "Returns a section of an array.",
    "_name": "slice"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "start",
     "description": "The beginning of the specified portion of the array. eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "end",
     "description": "The end of the specified portion of the array. eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "slice(0, 0)",
   "qName": "Array.slice"
  },
  "Array.splice": {
   "kind": 1,
   "namespace": "Array",
   "name": "splice",
   "attributes": {
    "paramDefl": {
     "start": "0",
     "deleteCount": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "helper": "arraySplice",
    "weight": 40,
    "paramHelp": {
     "start": "The zero-based location in the array from which to start removing elements. eg: 0",
     "deleteCount": "The number of elements to remove. eg: 0"
    },
    "jsDoc": "Removes elements from an array.",
    "_name": "splice"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "start",
     "description": "The zero-based location in the array from which to start removing elements. eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "deleteCount",
     "description": "The number of elements to remove. eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "splice(0, 0)",
   "qName": "Array.splice"
  },
  "Array.sort": {
   "kind": 1,
   "namespace": "Array",
   "name": "sort",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "helper": "arraySort",
    "weight": 40,
    "paramHelp": {
     "specifies": "a function that defines the sort order. If omitted, the array is sorted according to the prmitive type"
    },
    "jsDoc": "Sorts the elements of an array in place and returns the array. The sort is not necessarily stable.",
    "_name": "sort"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "callbackfn",
     "description": "",
     "type": "(value1: T, value2: T) => number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "sort()",
   "qName": "Array.sort"
  },
  "Array.map": {
   "kind": 1,
   "namespace": "Array",
   "name": "map",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "helper": "arrayMap",
    "weight": 40,
    "paramHelp": {
     "callbackfn": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array."
    },
    "jsDoc": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
    "_name": "map"
   },
   "pkg": null,
   "retType": "U[]",
   "parameters": [
    {
     "name": "callbackfn",
     "description": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.",
     "type": "(value: T, index: number) => U",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "map(function () {})",
   "qName": "Array.map"
  },
  "Array.filter": {
   "kind": 1,
   "namespace": "Array",
   "name": "filter",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "helper": "arrayFilter",
    "weight": 40,
    "paramHelp": {
     "callbackfn": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array."
    },
    "jsDoc": "Returns the elements of an array that meet the condition specified in a callback function.",
    "_name": "filter"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "callbackfn",
     "description": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.",
     "type": "(value: T, index: number) => boolean",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "filter(function () {})",
   "qName": "Array.filter"
  },
  "Array.reduce": {
   "kind": 1,
   "namespace": "Array",
   "name": "reduce",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "helper": "arrayReduce",
    "weight": 40,
    "paramHelp": {
     "callbackfn": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
     "initialValue": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
    },
    "jsDoc": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
    "_name": "reduce"
   },
   "pkg": null,
   "retType": "U",
   "parameters": [
    {
     "name": "callbackfn",
     "description": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
     "type": "(previousValue: U, currentValue: T, currentIndex: number) => U",
     "options": {},
     "isEnum": false
    },
    {
     "name": "initialValue",
     "description": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
     "type": "U",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "reduce(function () {}, null)",
   "qName": "Array.reduce"
  },
  "Array.removeElement": {
   "kind": 1,
   "namespace": "Array",
   "name": "removeElement",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Array_::removeElement",
    "weight": 48,
    "paramHelp": {},
    "jsDoc": "Removes the first occurence of an object. Returns true if removed.",
    "_name": "removeElement"
   },
   "pkg": null,
   "retType": "boolean",
   "parameters": [
    {
     "name": "element",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "removeElement(null)",
   "qName": "Array.removeElement"
  },
  "Array.removeAt": {
   "kind": 1,
   "namespace": "Array",
   "name": "removeAt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/removeat",
    "shim": "Array_::removeAt",
    "weight": 49,
    "advanced": true,
    "blockId": "array_removeat",
    "block": "%list| remove value at %index",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Removes the object at position index.",
    "_name": "removeAt"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [
    {
     "name": "index",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "removeAt(0)",
   "qName": "Array.removeAt"
  },
  "Array.insertAt": {
   "kind": 1,
   "namespace": "Array",
   "name": "insertAt",
   "attributes": {
    "paramDefl": {
     "index": "0",
     "the": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/insertat",
    "shim": "Array_::insertAt",
    "weight": 84,
    "advanced": true,
    "blockId": "array_insertAt",
    "block": "%list| insert at %index| value %value",
    "blockNamespace": "arrays",
    "paramHelp": {
     "index": "the zero-based position in the list to insert the value, eg: 0",
     "the": "value to insert, eg: 0"
    },
    "jsDoc": "Insert the value at a particular index, increases length by 1",
    "_name": "insertAt"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "index",
     "description": "the zero-based position in the list to insert the value, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "insertAt(0, null)",
   "qName": "Array.insertAt"
  },
  "Array.indexOf": {
   "kind": 1,
   "namespace": "Array",
   "name": "indexOf",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/indexof",
    "shim": "Array_::indexOf",
    "weight": 50,
    "advanced": true,
    "blockId": "array_indexof",
    "block": "%list| find index of %value",
    "blockNamespace": "arrays",
    "paramHelp": {
     "item": "The value to locate in the array.",
     "fromIndex": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
    },
    "jsDoc": "Returns the index of the first occurrence of a value in an array.",
    "_name": "indexOf"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "item",
     "description": "The value to locate in the array.",
     "type": "T",
     "options": {},
     "isEnum": false
    },
    {
     "name": "fromIndex",
     "description": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "indexOf(null)",
   "qName": "Array.indexOf"
  },
  "Array.get": {
   "kind": 1,
   "namespace": "Array",
   "name": "get",
   "attributes": {
    "paramDefl": {
     "index": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/get",
    "shim": "Array_::getAt",
    "weight": 85,
    "paramHelp": {
     "index": "the zero-based position in the list of the item, eg: 0"
    },
    "jsDoc": "Gets the value at a particular index",
    "_name": "get"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [
    {
     "name": "index",
     "description": "the zero-based position in the list of the item, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "get(0)",
   "qName": "Array.get"
  },
  "Array.set": {
   "kind": 1,
   "namespace": "Array",
   "name": "set",
   "attributes": {
    "paramDefl": {
     "index": "0",
     "the": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/set",
    "shim": "Array_::setAt",
    "weight": 84,
    "paramHelp": {
     "index": "the zero-based position in the list to store the value, eg: 0",
     "the": "value to insert, eg: 0"
    },
    "jsDoc": "Stores the value at a particular index",
    "_name": "set"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "index",
     "description": "the zero-based position in the list to store the value, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "set(0, null)",
   "qName": "Array.set"
  },
  "String": {
   "kind": 5,
   "namespace": "",
   "name": "String",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockNamespace": "Text",
    "paramHelp": {},
    "jsDoc": "Combine, split, and search text strings.\n\nCombine, split, and search text strings.",
    "block": "String"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "",
   "parameters": null,
   "qName": "String"
  },
  "String.concat": {
   "kind": 1,
   "namespace": "String",
   "name": "concat",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::concat",
    "weight": 49,
    "blockId": "string_concat",
    "blockNamespace": "text",
    "paramHelp": {
     "other": "The string to append to the end of the string."
    },
    "jsDoc": "Returns a string that contains the concatenation of two or more strings.",
    "_name": "concat"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [
    {
     "name": "other",
     "description": "The string to append to the end of the string.",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "concat(\"\")",
   "qName": "String.concat"
  },
  "String.charAt": {
   "kind": 1,
   "namespace": "String",
   "name": "charAt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::charAt",
    "weight": 48,
    "help": "text/char-at",
    "blockId": "string_get",
    "block": "char from %this=text|at %pos",
    "blockNamespace": "text",
    "paramHelp": {
     "index": "The zero-based index of the desired character."
    },
    "jsDoc": "Returns the character at the specified index.",
    "_name": "charAt"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [
    {
     "name": "index",
     "description": "The zero-based index of the desired character.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "charAt(0)",
   "qName": "String.charAt"
  },
  "String.length": {
   "kind": 2,
   "namespace": "String",
   "name": "length",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "property": "true",
    "shim": "String_::length",
    "weight": 47,
    "blockId": "text_length",
    "block": "length of %VALUE",
    "blockBuiltin": "true",
    "blockNamespace": "text",
    "paramHelp": {},
    "jsDoc": "Returns the length of a String object.",
    "_name": "length"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "String.length"
  },
  "String.charCodeAt": {
   "kind": 1,
   "namespace": "String",
   "name": "charCodeAt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::charCodeAt",
    "paramHelp": {
     "index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
    },
    "jsDoc": "Returns the Unicode value of the character at the specified location.",
    "_name": "charCodeAt"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "index",
     "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "charCodeAt(0)",
   "qName": "String.charCodeAt"
  },
  "String.compare": {
   "kind": 1,
   "namespace": "String",
   "name": "compare",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::compare",
    "help": "text/compare",
    "blockId": "string_compare",
    "block": "compare %this=text| to %that",
    "blockNamespace": "text",
    "paramHelp": {
     "that": "String to compare to target string"
    },
    "jsDoc": "Determines whether relative order of two strings (in ASCII encoding).",
    "_name": "compare"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "that",
     "description": "String to compare to target string",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "compare(\"\")",
   "qName": "String.compare"
  },
  "String.substr": {
   "kind": 1,
   "namespace": "String",
   "name": "substr",
   "attributes": {
    "paramDefl": {
     "length": "1000000",
     "start": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::substr",
    "help": "text/substr",
    "blockId": "string_substr",
    "block": "substring of %this=text|from %start|of length %length",
    "blockNamespace": "text",
    "paramHelp": {
     "start": "first character index; can be negative from counting from the end, eg:0",
     "length": "number of characters to extract"
    },
    "jsDoc": "Return substring of the current string.",
    "_name": "substr"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [
    {
     "name": "start",
     "description": "first character index; can be negative from counting from the end, eg:0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "length",
     "description": "number of characters to extract",
     "type": "number",
     "initializer": "1000000",
     "default": "1000000",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "substr(0)",
   "qName": "String.substr"
  },
  "String.isEmpty": {
   "kind": 1,
   "namespace": "String",
   "name": "isEmpty",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::isEmpty",
    "blockId": "string_isempty",
    "blockNamespace": "text",
    "paramHelp": {},
    "jsDoc": "Returns a value indicating if the string is empty",
    "_name": "isEmpty"
   },
   "pkg": null,
   "retType": "boolean",
   "parameters": [],
   "snippet": "isEmpty()",
   "qName": "String.isEmpty"
  },
  "parseInt": {
   "kind": 3,
   "namespace": "",
   "name": "parseInt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::toNumber",
    "help": "text/parse-int",
    "blockId": "string_parseint",
    "block": "parse to integer %text",
    "blockNamespace": "text",
    "paramHelp": {
     "s": "A string to convert into a number."
    },
    "jsDoc": "Convert a string to an integer.",
    "_name": "parseInt"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "text",
     "description": "",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "parseInt(\"\")",
   "qName": "parseInt"
  },
  "Object": {
   "kind": 9,
   "namespace": "",
   "name": "Object",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Object"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "Object",
   "parameters": null,
   "qName": "Object"
  },
  "Function": {
   "kind": 9,
   "namespace": "",
   "name": "Function",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Function"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "Function",
   "parameters": null,
   "qName": "Function"
  },
  "IArguments": {
   "kind": 9,
   "namespace": "",
   "name": "IArguments",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "IArguments"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "IArguments",
   "parameters": null,
   "qName": "IArguments"
  },
  "RegExp": {
   "kind": 9,
   "namespace": "",
   "name": "RegExp",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "RegExp"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "RegExp",
   "parameters": null,
   "qName": "RegExp"
  },
  "Boolean": {
   "kind": 9,
   "namespace": "",
   "name": "Boolean",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Boolean"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "Boolean",
   "parameters": null,
   "qName": "Boolean"
  },
  "Boolean.toString": {
   "kind": 1,
   "namespace": "Boolean",
   "name": "toString",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Boolean_::toString",
    "paramHelp": {},
    "jsDoc": "Returns a string representation of an object.",
    "_name": "toString"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [],
   "snippet": "toString()",
   "qName": "Boolean.toString"
  },
  "String.fromCharCode": {
   "kind": 3,
   "namespace": "String",
   "name": "fromCharCode",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "math/string-from-char-code",
    "shim": "String_::fromCharCode",
    "advanced": true,
    "blockNamespace": "Math",
    "blockId": "stringFromCharCode",
    "block": "text from char code %code",
    "weight": 1,
    "paramHelp": {},
    "jsDoc": "Make a string from the given ASCII character code.",
    "_name": "fromCharCode"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [
    {
     "name": "code",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "fromCharCode(0)",
   "qName": "String.fromCharCode"
  },
  "Number": {
   "kind": 9,
   "namespace": "",
   "name": "Number",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Number"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "Number",
   "parameters": null,
   "qName": "Number"
  },
  "Number.toString": {
   "kind": 1,
   "namespace": "Number",
   "name": "toString",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Number_::toString",
    "paramHelp": {},
    "jsDoc": "Returns a string representation of a number.",
    "_name": "toString"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [],
   "snippet": "toString()",
   "qName": "Number.toString"
  },
  "Math": {
   "kind": 5,
   "namespace": "",
   "name": "Math",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "More complex operations with numbers.",
    "block": "Math"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "Math"
  },
  "Math.pow": {
   "kind": 3,
   "namespace": "Math",
   "name": "pow",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::pow",
    "paramHelp": {
     "x": "The base value of the expression.",
     "y": "The exponent value of the expression."
    },
    "jsDoc": "Returns the value of a base expression taken to a specified power.",
    "_name": "pow"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The base value of the expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "y",
     "description": "The exponent value of the expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "pow(0, 0)",
   "qName": "Math.pow"
  },
  "Math.random": {
   "kind": 3,
   "namespace": "Math",
   "name": "random",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::random",
    "helpUrl": "/reference/math/random",
    "paramHelp": {},
    "jsDoc": "Returns a pseudorandom number between 0 and 1.",
    "_name": "random"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [],
   "snippet": "random()",
   "qName": "Math.random"
  },
  "Math.randomRange": {
   "kind": 3,
   "namespace": "Math",
   "name": "randomRange",
   "attributes": {
    "paramDefl": {
     "min": "0",
     "max": "10"
    },
    "callingConvention": 0,
    "_source": null,
    "blockId": "device_random",
    "block": "pick random %min|to %limit",
    "helpUrl": "/reference/math/random-range",
    "shim": "Math_::randomRange",
    "paramHelp": {
     "min": "the lower inclusive bound, eg: 0",
     "max": "the upper inclusive bound, eg: 10"
    },
    "jsDoc": "Returns a pseudorandom number between min and max included. \nIf both numbers are integral, the result is integral.",
    "_name": "randomRange"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "min",
     "description": "the lower inclusive bound, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "max",
     "description": "the upper inclusive bound, eg: 10",
     "type": "number",
     "initializer": "10",
     "default": "10",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "randomRange(0, 10)",
   "qName": "Math.randomRange"
  },
  "Math.log": {
   "kind": 3,
   "namespace": "Math",
   "name": "log",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::log",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns the natural logarithm (base e) of a number.",
    "_name": "log"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "log(0)",
   "qName": "Math.log"
  },
  "Math.exp": {
   "kind": 3,
   "namespace": "Math",
   "name": "exp",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::exp",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns returns ``e^x``.",
    "_name": "exp"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "exp(0)",
   "qName": "Math.exp"
  },
  "Math.sin": {
   "kind": 3,
   "namespace": "Math",
   "name": "sin",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::sin",
    "paramHelp": {
     "x": "An angle in radians"
    },
    "jsDoc": "Returns the sine of a number.",
    "_name": "sin"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "An angle in radians",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "sin(0)",
   "qName": "Math.sin"
  },
  "Math.cos": {
   "kind": 3,
   "namespace": "Math",
   "name": "cos",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::cos",
    "paramHelp": {
     "x": "An angle in radians"
    },
    "jsDoc": "Returns the cosine of a number.",
    "_name": "cos"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "An angle in radians",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "cos(0)",
   "qName": "Math.cos"
  },
  "Math.tan": {
   "kind": 3,
   "namespace": "Math",
   "name": "tan",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::tan",
    "paramHelp": {
     "x": "An angle in radians"
    },
    "jsDoc": "Returns the tangent of a number.",
    "_name": "tan"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "An angle in radians",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "tan(0)",
   "qName": "Math.tan"
  },
  "Math.asin": {
   "kind": 3,
   "namespace": "Math",
   "name": "asin",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::asin",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns the arcsine (in radians) of a number",
    "_name": "asin"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "asin(0)",
   "qName": "Math.asin"
  },
  "Math.acos": {
   "kind": 3,
   "namespace": "Math",
   "name": "acos",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::acos",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns the arccosine (in radians) of a number",
    "_name": "acos"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "acos(0)",
   "qName": "Math.acos"
  },
  "Math.atan": {
   "kind": 3,
   "namespace": "Math",
   "name": "atan",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::atan",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns the arctangent (in radians) of a number",
    "_name": "atan"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "atan(0)",
   "qName": "Math.atan"
  },
  "Math.atan2": {
   "kind": 3,
   "namespace": "Math",
   "name": "atan2",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::atan2",
    "paramHelp": {
     "y": "A number",
     "x": "A number"
    },
    "jsDoc": "Returns the arctangent of the quotient of its arguments.",
    "_name": "atan2"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "y",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "atan2(0, 0)",
   "qName": "Math.atan2"
  },
  "Math.sqrt": {
   "kind": 3,
   "namespace": "Math",
   "name": "sqrt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::sqrt",
    "paramHelp": {
     "x": "A numeric expression."
    },
    "jsDoc": "Returns the square root of a number.",
    "_name": "sqrt"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "sqrt(0)",
   "qName": "Math.sqrt"
  },
  "Math.ceil": {
   "kind": 3,
   "namespace": "Math",
   "name": "ceil",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::ceil",
    "paramHelp": {
     "x": "A numeric expression."
    },
    "jsDoc": "Returns the smallest number greater than or equal to its numeric argument.",
    "_name": "ceil"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "ceil(0)",
   "qName": "Math.ceil"
  },
  "Math.floor": {
   "kind": 3,
   "namespace": "Math",
   "name": "floor",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::floor",
    "paramHelp": {
     "x": "A numeric expression."
    },
    "jsDoc": "Returns the greatest number less than or equal to its numeric argument.",
    "_name": "floor"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "floor(0)",
   "qName": "Math.floor"
  },
  "Math.trunc": {
   "kind": 3,
   "namespace": "Math",
   "name": "trunc",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::trunc",
    "paramHelp": {
     "x": "A numeric expression."
    },
    "jsDoc": "Returns the number with the decimal part truncated.",
    "_name": "trunc"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "trunc(0)",
   "qName": "Math.trunc"
  },
  "Math.round": {
   "kind": 3,
   "namespace": "Math",
   "name": "round",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::round",
    "paramHelp": {
     "x": "The value to be rounded to the nearest number."
    },
    "jsDoc": "Returns a supplied numeric expression rounded to the nearest number.",
    "_name": "round"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The value to be rounded to the nearest number.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "round(0)",
   "qName": "Math.round"
  },
  "Math.imul": {
   "kind": 3,
   "namespace": "Math",
   "name": "imul",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::imul",
    "paramHelp": {
     "x": "The first number",
     "y": "The second number"
    },
    "jsDoc": "Returns the value of integer signed 32 bit multiplication of two numbers.",
    "_name": "imul"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The first number",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "y",
     "description": "The second number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "imul(0, 0)",
   "qName": "Math.imul"
  },
  "Math.idiv": {
   "kind": 3,
   "namespace": "Math",
   "name": "idiv",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::idiv",
    "paramHelp": {
     "x": "The first number",
     "y": "The second number"
    },
    "jsDoc": "Returns the value of integer signed 32 bit division of two numbers.",
    "_name": "idiv"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The first number",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "y",
     "description": "The second number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "idiv(0, 0)",
   "qName": "Math.idiv"
  },
  "helpers": {
   "kind": 5,
   "namespace": "",
   "name": "helpers",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "helpers"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "helpers"
  },
  "helpers.arraySplice": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arraySplice",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arraySplice"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "start",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "len",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arraySplice([], 0, 0)",
   "qName": "helpers.arraySplice"
  },
  "helpers.arrayReverse": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayReverse",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayReverse"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayReverse([])",
   "qName": "helpers.arrayReverse"
  },
  "helpers.arrayShift": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayShift",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayShift"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayShift([])",
   "qName": "helpers.arrayShift"
  },
  "helpers.arrayUnshift": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayUnshift",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayUnshift"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayUnshift([], null)",
   "qName": "helpers.arrayUnshift"
  },
  "helpers.arraySort": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arraySort",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arraySort"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "callbackfn",
     "description": "",
     "type": "(value1: T, value2: T) => number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arraySort([])",
   "qName": "helpers.arraySort"
  },
  "helpers.arrayMap": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayMap",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayMap"
   },
   "pkg": null,
   "retType": "U[]",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "callbackfn",
     "description": "",
     "type": "(value: T, index: number) => U",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayMap([], function () {})",
   "qName": "helpers.arrayMap"
  },
  "helpers.arrayFilter": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayFilter",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayFilter"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "callbackfn",
     "description": "",
     "type": "(value: T, index: number) => boolean",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayFilter([], function () {})",
   "qName": "helpers.arrayFilter"
  },
  "helpers.arrayReduce": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayReduce",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayReduce"
   },
   "pkg": null,
   "retType": "U",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "callbackfn",
     "description": "",
     "type": "(previousValue: U, currentValue: T, currentIndex: number) => U",
     "options": {},
     "isEnum": false
    },
    {
     "name": "initialValue",
     "description": "",
     "type": "U",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayReduce([], function () {}, null)",
   "qName": "helpers.arrayReduce"
  },
  "helpers.arraySlice": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arraySlice",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arraySlice"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "start",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "end",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arraySlice([], 0, 0)",
   "qName": "helpers.arraySlice"
  },
  "Math.clamp": {
   "kind": 3,
   "namespace": "Math",
   "name": "clamp",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "clamp"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "min",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "max",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "clamp(0, 0, 0)",
   "qName": "Math.clamp"
  },
  "Math.abs": {
   "kind": 3,
   "namespace": "Math",
   "name": "abs",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {
     "x": "A numeric expression for which the absolute value is needed."
    },
    "jsDoc": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5.",
    "_name": "abs"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression for which the absolute value is needed.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "abs(0)",
   "qName": "Math.abs"
  },
  "Math.sign": {
   "kind": 3,
   "namespace": "Math",
   "name": "sign",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {
     "x": "The numeric expression to test"
    },
    "jsDoc": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
    "_name": "sign"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The numeric expression to test",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "sign(0)",
   "qName": "Math.sign"
  },
  "Math.max": {
   "kind": 3,
   "namespace": "Math",
   "name": "max",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Returns the larger of two supplied numeric expressions.",
    "_name": "max"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "a",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "b",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "max(0, 0)",
   "qName": "Math.max"
  },
  "Math.min": {
   "kind": 3,
   "namespace": "Math",
   "name": "min",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Returns the smaller of two supplied numeric expressions.",
    "_name": "min"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "a",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "b",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "min(0, 0)",
   "qName": "Math.min"
  },
  "Direction": {
   "kind": 6,
   "namespace": "",
   "name": "Direction",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Direction"
   },
   "pkg": null,
   "retType": "Direction",
   "parameters": null,
   "qName": "Direction"
  },
  "Direction.Left": {
   "kind": 7,
   "namespace": "Direction",
   "name": "Left",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "left",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Left"
   },
   "pkg": null,
   "retType": "Direction",
   "parameters": null,
   "qName": "Direction.Left"
  },
  "Direction.Right": {
   "kind": 7,
   "namespace": "Direction",
   "name": "Right",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "right",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Right"
   },
   "pkg": null,
   "retType": "Direction",
   "parameters": null,
   "qName": "Direction.Right"
  },
  "Axes": {
   "kind": 6,
   "namespace": "",
   "name": "Axes",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Axes"
   },
   "pkg": null,
   "retType": "Axes",
   "parameters": null,
   "qName": "Axes"
  },
  "Axes.x": {
   "kind": 7,
   "namespace": "Axes",
   "name": "x",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "x",
    "blockIdentity": "axes.named",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "x"
   },
   "pkg": null,
   "retType": "Axes",
   "parameters": null,
   "qName": "Axes.x"
  },
  "Axes.y": {
   "kind": 7,
   "namespace": "Axes",
   "name": "y",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "y",
    "blockIdentity": "axes.named",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "y"
   },
   "pkg": null,
   "retType": "Axes",
   "parameters": null,
   "qName": "Axes.y"
  },
  "Axes.z": {
   "kind": 7,
   "namespace": "Axes",
   "name": "z",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "z",
    "blockIdentity": "axes.named",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "z"
   },
   "pkg": null,
   "retType": "Axes",
   "parameters": null,
   "qName": "Axes.z"
  },
  "MarkerCode": {
   "kind": 6,
   "namespace": "",
   "name": "MarkerCode",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "An augmented reality marker",
    "_name": "MarkerCode"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode"
  },
  "MarkerCode.Marker0": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker0",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "0",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker0"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker0"
  },
  "MarkerCode.Marker1": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker1",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "1",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker1"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker1"
  },
  "MarkerCode.Marker2": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker2",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "2",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker2"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker2"
  },
  "MarkerCode.Marker3": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker3",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "3",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker3"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker3"
  },
  "MarkerCode.Marker4": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker4",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "4",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker4"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker4"
  },
  "MarkerCode.Marker5": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker5",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "5",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker5"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker5"
  },
  "MarkerCode.Marker6": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker6",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "6",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker6"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker6"
  },
  "MarkerCode.Marker7": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker7",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "7",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker7"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker7"
  },
  "MarkerCode.Marker8": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker8",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "8",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker8"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker8"
  },
  "MarkerCode.Marker9": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker9",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "9",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker9"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker9"
  },
  "MarkerCode.Marker10": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker10",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "10",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker10"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker10"
  },
  "MarkerCode.Marker11": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker11",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "11",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker11"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker11"
  },
  "MarkerCode.Marker12": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker12",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "12",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker12"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker12"
  },
  "MarkerCode.Marker13": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker13",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "13",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker13"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker13"
  },
  "MarkerCode.Marker14": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker14",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "14",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker14"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker14"
  },
  "MarkerCode.Marker15": {
   "kind": 7,
   "namespace": "MarkerCode",
   "name": "Marker15",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockImage": "1",
    "blockIdentity": "markers.marker",
    "enumval": "15",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Marker15"
   },
   "pkg": null,
   "retType": "MarkerCode",
   "parameters": null,
   "qName": "MarkerCode.Marker15"
  },
  "MarkerEvent": {
   "kind": 6,
   "namespace": "",
   "name": "MarkerEvent",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "MarkerEvent"
   },
   "pkg": null,
   "retType": "MarkerEvent",
   "parameters": null,
   "qName": "MarkerEvent"
  },
  "MarkerEvent.Hidden": {
   "kind": 7,
   "namespace": "MarkerEvent",
   "name": "Hidden",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "hidden",
    "enumval": "0x01",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Hidden"
   },
   "pkg": null,
   "retType": "MarkerEvent",
   "parameters": null,
   "qName": "MarkerEvent.Hidden"
  },
  "MarkerEvent.Visible": {
   "kind": 7,
   "namespace": "MarkerEvent",
   "name": "Visible",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "visible",
    "enumval": "0x02",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Visible"
   },
   "pkg": null,
   "retType": "MarkerEvent",
   "parameters": null,
   "qName": "MarkerEvent.Visible"
  },
  "MarkerEvent.Moved": {
   "kind": 7,
   "namespace": "MarkerEvent",
   "name": "Moved",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "moved",
    "enumval": "0x03",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Moved"
   },
   "pkg": null,
   "retType": "MarkerEvent",
   "parameters": null,
   "qName": "MarkerEvent.Moved"
  },
  "MarkerEvent.MovedLeft": {
   "kind": 7,
   "namespace": "MarkerEvent",
   "name": "MovedLeft",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "moved left",
    "enumval": "0x04",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "MovedLeft"
   },
   "pkg": null,
   "retType": "MarkerEvent",
   "parameters": null,
   "qName": "MarkerEvent.MovedLeft"
  },
  "MarkerEvent.MovedRight": {
   "kind": 7,
   "namespace": "MarkerEvent",
   "name": "MovedRight",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "moved right",
    "enumval": "0x05",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "MovedRight"
   },
   "pkg": null,
   "retType": "MarkerEvent",
   "parameters": null,
   "qName": "MarkerEvent.MovedRight"
  },
  "MarkerEvent.MovedUp": {
   "kind": 7,
   "namespace": "MarkerEvent",
   "name": "MovedUp",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "moved up",
    "enumval": "0x06",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "MovedUp"
   },
   "pkg": null,
   "retType": "MarkerEvent",
   "parameters": null,
   "qName": "MarkerEvent.MovedUp"
  },
  "MarkerEvent.MovedDown": {
   "kind": 7,
   "namespace": "MarkerEvent",
   "name": "MovedDown",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "moved down",
    "enumval": "0x07",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "MovedDown"
   },
   "pkg": null,
   "retType": "MarkerEvent",
   "parameters": null,
   "qName": "MarkerEvent.MovedDown"
  },
  "MarkerEvent.MovedForward": {
   "kind": 7,
   "namespace": "MarkerEvent",
   "name": "MovedForward",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "moved forward",
    "enumval": "0x11",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "MovedForward"
   },
   "pkg": null,
   "retType": "MarkerEvent",
   "parameters": null,
   "qName": "MarkerEvent.MovedForward"
  },
  "MarkerEvent.MovedBackward": {
   "kind": 7,
   "namespace": "MarkerEvent",
   "name": "MovedBackward",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "moved backward",
    "enumval": "0x12",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "MovedBackward"
   },
   "pkg": null,
   "retType": "MarkerEvent",
   "parameters": null,
   "qName": "MarkerEvent.MovedBackward"
  },
  "MarkerLoopEvent": {
   "kind": 6,
   "namespace": "",
   "name": "MarkerLoopEvent",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "MarkerLoopEvent"
   },
   "pkg": null,
   "retType": "MarkerLoopEvent",
   "parameters": null,
   "qName": "MarkerLoopEvent"
  },
  "MarkerLoopEvent.WhileHidden": {
   "kind": 7,
   "namespace": "MarkerLoopEvent",
   "name": "WhileHidden",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "hidden",
    "enumval": "0x13",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "WhileHidden"
   },
   "pkg": null,
   "retType": "MarkerLoopEvent",
   "parameters": null,
   "qName": "MarkerLoopEvent.WhileHidden"
  },
  "MarkerLoopEvent.WhileVisible": {
   "kind": 7,
   "namespace": "MarkerLoopEvent",
   "name": "WhileVisible",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "visible",
    "enumval": "0x14",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "WhileVisible"
   },
   "pkg": null,
   "retType": "MarkerLoopEvent",
   "parameters": null,
   "qName": "MarkerLoopEvent.WhileVisible"
  },
  "MultiMarkerEvent": {
   "kind": 6,
   "namespace": "",
   "name": "MultiMarkerEvent",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "MultiMarkerEvent"
   },
   "pkg": null,
   "retType": "MultiMarkerEvent",
   "parameters": null,
   "qName": "MultiMarkerEvent"
  },
  "MultiMarkerEvent.Close": {
   "kind": 7,
   "namespace": "MultiMarkerEvent",
   "name": "Close",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "close to",
    "enumval": "0x15",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Close"
   },
   "pkg": null,
   "retType": "MultiMarkerEvent",
   "parameters": null,
   "qName": "MultiMarkerEvent.Close"
  },
  "MultiMarkerEvent.Far": {
   "kind": 7,
   "namespace": "MultiMarkerEvent",
   "name": "Far",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "far from",
    "enumval": "0x16",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Far"
   },
   "pkg": null,
   "retType": "MultiMarkerEvent",
   "parameters": null,
   "qName": "MultiMarkerEvent.Far"
  },
  "MultiMarkerEvent.Touching": {
   "kind": 7,
   "namespace": "MultiMarkerEvent",
   "name": "Touching",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "touching",
    "enumval": "0x17",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Touching"
   },
   "pkg": null,
   "retType": "MultiMarkerEvent",
   "parameters": null,
   "qName": "MultiMarkerEvent.Touching"
  },
  "Colors": {
   "kind": 6,
   "namespace": "",
   "name": "Colors",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Well known colors for a NeoPixel strip",
    "_name": "Colors"
   },
   "pkg": null,
   "retType": "Colors",
   "parameters": null,
   "qName": "Colors"
  },
  "Colors.Red": {
   "kind": 7,
   "namespace": "Colors",
   "name": "Red",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "red",
    "blockIdentity": "colors.named",
    "enumval": "0xFF0000",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Red"
   },
   "pkg": null,
   "retType": "Colors",
   "parameters": null,
   "qName": "Colors.Red"
  },
  "Colors.Orange": {
   "kind": 7,
   "namespace": "Colors",
   "name": "Orange",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "orange",
    "blockIdentity": "colors.named",
    "enumval": "0xFFA500",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Orange"
   },
   "pkg": null,
   "retType": "Colors",
   "parameters": null,
   "qName": "Colors.Orange"
  },
  "Colors.Yellow": {
   "kind": 7,
   "namespace": "Colors",
   "name": "Yellow",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "yellow",
    "blockIdentity": "colors.named",
    "enumval": "0xFFFF00",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Yellow"
   },
   "pkg": null,
   "retType": "Colors",
   "parameters": null,
   "qName": "Colors.Yellow"
  },
  "Colors.Green": {
   "kind": 7,
   "namespace": "Colors",
   "name": "Green",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "green",
    "blockIdentity": "colors.named",
    "enumval": "0x00FF00",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Green"
   },
   "pkg": null,
   "retType": "Colors",
   "parameters": null,
   "qName": "Colors.Green"
  },
  "Colors.Blue": {
   "kind": 7,
   "namespace": "Colors",
   "name": "Blue",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "blue",
    "blockIdentity": "colors.named",
    "enumval": "0x0000FF",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Blue"
   },
   "pkg": null,
   "retType": "Colors",
   "parameters": null,
   "qName": "Colors.Blue"
  },
  "Colors.Indigo": {
   "kind": 7,
   "namespace": "Colors",
   "name": "Indigo",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "indigo",
    "blockIdentity": "colors.named",
    "enumval": "0x4b0082",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Indigo"
   },
   "pkg": null,
   "retType": "Colors",
   "parameters": null,
   "qName": "Colors.Indigo"
  },
  "Colors.Violet": {
   "kind": 7,
   "namespace": "Colors",
   "name": "Violet",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "violet",
    "blockIdentity": "colors.named",
    "enumval": "0x8a2be2",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Violet"
   },
   "pkg": null,
   "retType": "Colors",
   "parameters": null,
   "qName": "Colors.Violet"
  },
  "Colors.Purple": {
   "kind": 7,
   "namespace": "Colors",
   "name": "Purple",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "purple",
    "blockIdentity": "colors.named",
    "enumval": "0xFF00FF",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Purple"
   },
   "pkg": null,
   "retType": "Colors",
   "parameters": null,
   "qName": "Colors.Purple"
  },
  "Colors.Pink": {
   "kind": 7,
   "namespace": "Colors",
   "name": "Pink",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "pink",
    "blockIdentity": "colors.named",
    "enumval": "0xFF54A6",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Pink"
   },
   "pkg": null,
   "retType": "Colors",
   "parameters": null,
   "qName": "Colors.Pink"
  },
  "Colors.White": {
   "kind": 7,
   "namespace": "Colors",
   "name": "White",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "white",
    "blockIdentity": "colors.named",
    "enumval": "0xFFFFFF",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "White"
   },
   "pkg": null,
   "retType": "Colors",
   "parameters": null,
   "qName": "Colors.White"
  },
  "Colors.Black": {
   "kind": 7,
   "namespace": "Colors",
   "name": "Black",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "black",
    "blockIdentity": "colors.named",
    "enumval": "0x000000",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Black"
   },
   "pkg": null,
   "retType": "Colors",
   "parameters": null,
   "qName": "Colors.Black"
  },
  "Shape": {
   "kind": 6,
   "namespace": "",
   "name": "Shape",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "3D Shape Primitives supported by THREE.js",
    "_name": "Shape"
   },
   "pkg": null,
   "retType": "Shape",
   "parameters": null,
   "qName": "Shape"
  },
  "Shape.Box": {
   "kind": 7,
   "namespace": "Shape",
   "name": "Box",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "box",
    "blockImage": "1",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Box"
   },
   "pkg": null,
   "retType": "Shape",
   "parameters": null,
   "qName": "Shape.Box"
  },
  "Shape.Sphere": {
   "kind": 7,
   "namespace": "Shape",
   "name": "Sphere",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "sphere",
    "blockImage": "1",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Sphere"
   },
   "pkg": null,
   "retType": "Shape",
   "parameters": null,
   "qName": "Shape.Sphere"
  },
  "Shape.Cone": {
   "kind": 7,
   "namespace": "Shape",
   "name": "Cone",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "cone",
    "blockImage": "1",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Cone"
   },
   "pkg": null,
   "retType": "Shape",
   "parameters": null,
   "qName": "Shape.Cone"
  },
  "Shape.Cylinder": {
   "kind": 7,
   "namespace": "Shape",
   "name": "Cylinder",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "cylinder",
    "blockImage": "1",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Cylinder"
   },
   "pkg": null,
   "retType": "Shape",
   "parameters": null,
   "qName": "Shape.Cylinder"
  },
  "Shape.Tetrahedron": {
   "kind": 7,
   "namespace": "Shape",
   "name": "Tetrahedron",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "tetrahedron",
    "blockImage": "1",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Tetrahedron"
   },
   "pkg": null,
   "retType": "Shape",
   "parameters": null,
   "qName": "Shape.Tetrahedron"
  },
  "Shape.Icosahedron": {
   "kind": 7,
   "namespace": "Shape",
   "name": "Icosahedron",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "icosahedron",
    "blockImage": "1",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Icosahedron"
   },
   "pkg": null,
   "retType": "Shape",
   "parameters": null,
   "qName": "Shape.Icosahedron"
  },
  "Filter": {
   "kind": 6,
   "namespace": "",
   "name": "Filter",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Filter"
   },
   "pkg": null,
   "retType": "Filter",
   "parameters": null,
   "qName": "Filter"
  },
  "Filter.Grayscale": {
   "kind": 7,
   "namespace": "Filter",
   "name": "Grayscale",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "grayscale",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Grayscale"
   },
   "pkg": null,
   "retType": "Filter",
   "parameters": null,
   "qName": "Filter.Grayscale"
  },
  "Filter.Sepia": {
   "kind": 7,
   "namespace": "Filter",
   "name": "Sepia",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "sepia",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Sepia"
   },
   "pkg": null,
   "retType": "Filter",
   "parameters": null,
   "qName": "Filter.Sepia"
  },
  "Filter.Invert": {
   "kind": 7,
   "namespace": "Filter",
   "name": "Invert",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "invert",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Invert"
   },
   "pkg": null,
   "retType": "Filter",
   "parameters": null,
   "qName": "Filter.Invert"
  },
  "Filter.Saturate": {
   "kind": 7,
   "namespace": "Filter",
   "name": "Saturate",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "saturate",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Saturate"
   },
   "pkg": null,
   "retType": "Filter",
   "parameters": null,
   "qName": "Filter.Saturate"
  },
  "Filter.HueRotate": {
   "kind": 7,
   "namespace": "Filter",
   "name": "HueRotate",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "hue-rotate",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "HueRotate"
   },
   "pkg": null,
   "retType": "Filter",
   "parameters": null,
   "qName": "Filter.HueRotate"
  },
  "Filter.Blur": {
   "kind": 7,
   "namespace": "Filter",
   "name": "Blur",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "blur",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Blur"
   },
   "pkg": null,
   "retType": "Filter",
   "parameters": null,
   "qName": "Filter.Blur"
  },
  "Filter.Contrast": {
   "kind": 7,
   "namespace": "Filter",
   "name": "Contrast",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "high contrast",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Contrast"
   },
   "pkg": null,
   "retType": "Filter",
   "parameters": null,
   "qName": "Filter.Contrast"
  },
  "Filter.Green": {
   "kind": 7,
   "namespace": "Filter",
   "name": "Green",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "green",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Green"
   },
   "pkg": null,
   "retType": "Filter",
   "parameters": null,
   "qName": "Filter.Green"
  },
  "ModelType": {
   "kind": 6,
   "namespace": "",
   "name": "ModelType",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "ModelType"
   },
   "pkg": null,
   "retType": "ModelType",
   "parameters": null,
   "qName": "ModelType"
  },
  "ModelType.OBJ": {
   "kind": 7,
   "namespace": "ModelType",
   "name": "OBJ",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "OBJ"
   },
   "pkg": null,
   "retType": "ModelType",
   "parameters": null,
   "qName": "ModelType.OBJ"
  },
  "ModelType.STL": {
   "kind": 7,
   "namespace": "ModelType",
   "name": "STL",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "STL"
   },
   "pkg": null,
   "retType": "ModelType",
   "parameters": null,
   "qName": "ModelType.STL"
  },
  "ModelType.MTL": {
   "kind": 7,
   "namespace": "ModelType",
   "name": "MTL",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "MTL"
   },
   "pkg": null,
   "retType": "ModelType",
   "parameters": null,
   "qName": "ModelType.MTL"
  },
  "ModelType.DAE": {
   "kind": 7,
   "namespace": "ModelType",
   "name": "DAE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "DAE"
   },
   "pkg": null,
   "retType": "ModelType",
   "parameters": null,
   "qName": "ModelType.DAE"
  },
  "Toggle": {
   "kind": 6,
   "namespace": "",
   "name": "Toggle",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Toggle"
   },
   "pkg": null,
   "retType": "Toggle",
   "parameters": null,
   "qName": "Toggle"
  },
  "Toggle.on": {
   "kind": 7,
   "namespace": "Toggle",
   "name": "on",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "on"
   },
   "pkg": null,
   "retType": "Toggle",
   "parameters": null,
   "qName": "Toggle.on"
  },
  "Toggle.off": {
   "kind": 7,
   "namespace": "Toggle",
   "name": "off",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "off"
   },
   "pkg": null,
   "retType": "Toggle",
   "parameters": null,
   "qName": "Toggle.off"
  },
  "loops": {
   "kind": 5,
   "namespace": "",
   "name": "loops",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "loops",
    "block": "loops"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "loops"
  },
  "loops.forever": {
   "kind": 3,
   "namespace": "loops",
   "name": "forever",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "functions/forever",
    "weight": 55,
    "blockGap": "8",
    "blockId": "device_forever",
    "block": "forever",
    "shim": "loops::forever",
    "paramHelp": {
     "body": "the code to repeat"
    },
    "jsDoc": "Repeats the code forever in the background. On each iteration, allows other code to run.",
    "_name": "forever"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "body",
     "description": "the code to repeat",
     "type": "() => void",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "forever(function () {})",
   "qName": "loops.forever"
  },
  "loops.pause": {
   "kind": 3,
   "namespace": "loops",
   "name": "pause",
   "attributes": {
    "paramDefl": {
     "ms": "100"
    },
    "callingConvention": 2,
    "_source": null,
    "help": "functions/pause",
    "weight": 54,
    "block": "pause (ms) %pause",
    "blockId": "device_pause",
    "shim": "loops::pauseAsync",
    "promise": "true",
    "paramHelp": {
     "ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000"
    },
    "jsDoc": "Pause for the specified time in milliseconds",
    "_name": "pause"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "ms",
     "description": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
     "type": "number",
     "initializer": "100",
     "default": "100",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "pause(100)",
   "qName": "loops.pause"
  },
  "console": {
   "kind": 5,
   "namespace": "",
   "name": "console",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "console",
    "block": "console"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "console"
  },
  "console.log": {
   "kind": 3,
   "namespace": "console",
   "name": "log",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "console::log",
    "paramHelp": {},
    "jsDoc": "Print out message",
    "_name": "log"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "msg",
     "description": "",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "log(\"\")",
   "qName": "console.log"
  },
  "colors": {
   "kind": 5,
   "namespace": "",
   "name": "colors",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 87,
    "icon": "",
    "color": "#4c38ff",
    "paramHelp": {},
    "jsDoc": "Colors",
    "block": "colors"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "colors"
  },
  "colors.rgb": {
   "kind": 3,
   "namespace": "colors",
   "name": "rgb",
   "attributes": {
    "paramDefl": {
     "red": "255",
     "green": "255",
     "blue": "255"
    },
    "callingConvention": 0,
    "_source": null,
    "blockId": "colors_rgb",
    "block": "red %red|green %green|blue %blue",
    "paramMin": {
     "red": "0",
     "green": "0",
     "blue": "0"
    },
    "paramMax": {
     "red": "255",
     "green": "255",
     "blue": "255"
    },
    "advanced": false,
    "weight": 19,
    "blockGap": "8",
    "shim": "colors::rgb",
    "paramHelp": {
     "red": "value of the red channel between 0 and 255. eg: 255",
     "green": "value of the green channel between 0 and 255. eg: 255",
     "blue": "value of the blue channel between 0 and 255. eg: 255"
    },
    "jsDoc": "Converts red, green, blue channels into a RGB color",
    "_name": "rgb"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "red",
     "description": "value of the red channel between 0 and 255. eg: 255",
     "type": "number",
     "initializer": "255",
     "default": "255",
     "options": {
      "min": {
       "value": "0"
      },
      "max": {
       "value": "255"
      }
     },
     "isEnum": false
    },
    {
     "name": "green",
     "description": "value of the green channel between 0 and 255. eg: 255",
     "type": "number",
     "initializer": "255",
     "default": "255",
     "options": {
      "min": {
       "value": "0"
      },
      "max": {
       "value": "255"
      }
     },
     "isEnum": false
    },
    {
     "name": "blue",
     "description": "value of the blue channel between 0 and 255. eg: 255",
     "type": "number",
     "initializer": "255",
     "default": "255",
     "options": {
      "min": {
       "value": "0"
      },
      "max": {
       "value": "255"
      }
     },
     "isEnum": false
    }
   ],
   "snippet": "rgb(255, 255, 255)",
   "qName": "colors.rgb"
  },
  "colors.named": {
   "kind": 3,
   "namespace": "colors",
   "name": "named",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "colors_named",
    "block": "%color",
    "advanced": false,
    "weight": 20,
    "blockGap": "8",
    "help": "colors/named",
    "shim": "colors::named",
    "paramHelp": {},
    "jsDoc": "Get the RGB value of a known color",
    "_name": "named"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "color",
     "description": "",
     "type": "Colors",
     "options": {},
     "isEnum": true
    }
   ],
   "snippet": "named(null)",
   "qName": "colors.named"
  },
  "design": {
   "kind": 5,
   "namespace": "",
   "name": "design",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 91,
    "icon": "",
    "color": "#16ccb0",
    "paramHelp": {},
    "jsDoc": "Design",
    "block": "design"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "design"
  },
  "design.setText": {
   "kind": 3,
   "namespace": "design",
   "name": "setText",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_text",
    "block": "%marker=marker_block|set text %text",
    "blockGap": "8",
    "weight": 98,
    "blockNamespace": "design",
    "inBasicCategory": "true",
    "shim": "design::setText",
    "paramHelp": {},
    "jsDoc": "Sets the text  that displays when the marker is detected",
    "_name": "setText"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "text",
     "description": "",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "setText(0, \"\")",
   "qName": "design.setText"
  },
  "design.setNumber": {
   "kind": 3,
   "namespace": "design",
   "name": "setNumber",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_number",
    "block": "%marker=marker_block|set number %number",
    "blockGap": "8",
    "weight": 96,
    "blockNamespace": "design",
    "inBasicCategory": "true",
    "shim": "design::setNumber",
    "paramHelp": {},
    "jsDoc": "Sets the number that displays when the marker is detected",
    "_name": "setNumber"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "number",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "setNumber(0, 0)",
   "qName": "design.setNumber"
  },
  "design.setShape": {
   "kind": 3,
   "namespace": "design",
   "name": "setShape",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_shape",
    "block": "%marker=marker_block|set shape %shape",
    "blockGap": "8",
    "weight": 100,
    "paramFieldEditor": {
     "shape": "gridpicker"
    },
    "paramFieldEditorOptions": {
     "shape": {
      "width": "200",
      "columns": "2",
      "itemColour": "black",
      "tooltips": "true"
     }
    },
    "blockNamespace": "design",
    "inBasicCategory": "true",
    "shim": "design::setShape",
    "paramHelp": {},
    "jsDoc": "Sets the shape that displays when the marker is detected",
    "_name": "setShape"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "shape",
     "description": "",
     "type": "Shape",
     "options": {},
     "isEnum": true
    }
   ],
   "snippet": "setShape(0, null)",
   "qName": "design.setShape"
  },
  "design.setModel": {
   "kind": 3,
   "namespace": "design",
   "name": "setModel",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_model",
    "block": "%marker=marker_block|set model %content",
    "blockGap": "8",
    "weight": 20,
    "blockNamespace": "design",
    "inBasicCategory": "true",
    "shim": "design::setModel",
    "paramHelp": {},
    "jsDoc": "Sets the model that displays when the marker is detected. Takes in a string of the 3D model.",
    "_name": "setModel"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "type",
     "description": "",
     "type": "ModelType",
     "options": {},
     "isEnum": true
    },
    {
     "name": "content",
     "description": "",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "setModel(0, null, \"\")",
   "qName": "design.setModel"
  },
  "design.setColor": {
   "kind": 3,
   "namespace": "design",
   "name": "setColor",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_color",
    "block": "%marker=marker_block|set color %color=colors_named",
    "blockGap": "8",
    "weight": 99,
    "blockNamespace": "design",
    "inBasicCategory": "true",
    "shim": "design::setColor",
    "paramHelp": {},
    "jsDoc": "Sets the color that displays when the marker is detected",
    "_name": "setColor"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "color",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "setColor(0, 0)",
   "qName": "design.setColor"
  },
  "design.setOpacity": {
   "kind": 3,
   "namespace": "design",
   "name": "setOpacity",
   "attributes": {
    "paramDefl": {
     "value": "0.9"
    },
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_opacity",
    "block": "%marker=marker_block|set opacity %value",
    "blockGap": "8",
    "weight": 95,
    "blockNamespace": "design",
    "inBasicCategory": "true",
    "shim": "design::setOpacity",
    "paramHelp": {
     "value": "How opaque the shape should be between 0 and 1, eg: 0.9"
    },
    "jsDoc": "Sets the opacity of the shape that is displayed on the marker. 0 is invisible, 1 is fully opaque.",
    "_name": "setOpacity"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "How opaque the shape should be between 0 and 1, eg: 0.9",
     "type": "number",
     "initializer": "0.9",
     "default": "0.9",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "setOpacity(0, 0.9)",
   "qName": "design.setOpacity"
  },
  "design.setTextColor": {
   "kind": 3,
   "namespace": "design",
   "name": "setTextColor",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_text_color",
    "block": "%marker=marker_block|set text color %color=colors_named",
    "blockGap": "8",
    "weight": 97,
    "blockNamespace": "design",
    "inBasicCategory": "true",
    "shim": "design::setTextColor",
    "paramHelp": {},
    "jsDoc": "Sets the text color that displays when the marker is detected",
    "_name": "setTextColor"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "color",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "setTextColor(0, 0)",
   "qName": "design.setTextColor"
  },
  "design.setScale": {
   "kind": 3,
   "namespace": "design",
   "name": "setScale",
   "attributes": {
    "paramDefl": {
     "size": "1"
    },
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_scale",
    "block": "%marker=marker_block|set scale %number",
    "blockGap": "8",
    "weight": 94,
    "blockNamespace": "design",
    "inBasicCategory": "true",
    "inlineInputMode": "inline",
    "shim": "design::setScale",
    "paramHelp": {
     "size": "The amount to scale the model by, eg: 1"
    },
    "jsDoc": "Sets the size of the 3D object that is rendered. Shapes will automatically have a default scale value of 1.",
    "_name": "setScale"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "size",
     "description": "The amount to scale the model by, eg: 1",
     "type": "number",
     "initializer": "1",
     "default": "1",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "setScale(0, 1)",
   "qName": "design.setScale"
  },
  "design.setScale3D": {
   "kind": 3,
   "namespace": "design",
   "name": "setScale3D",
   "attributes": {
    "paramDefl": {
     "x": "1",
     "y": "1",
     "z": "1"
    },
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_scale_3d",
    "block": "%marker=marker_block|set scale x: %x|y: %y|z: %z",
    "blockGap": "8",
    "blockNamespace": "design",
    "advanced": true,
    "inlineInputMode": "inline",
    "shim": "design::setScale3D",
    "paramHelp": {
     "x": "The amount to scale the model in the x direction, eg: 1",
     "y": "The amount to scale the model in the y direction, eg: 1",
     "z": "The amount to scale the model in the z direction, eg: 1"
    },
    "jsDoc": "Sets the size of the 3D object that is rendered. Shapes will automatically have a default scale value of (1, 1, 1).",
    "_name": "setScale3D"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "x",
     "description": "The amount to scale the model in the x direction, eg: 1",
     "type": "number",
     "initializer": "1",
     "default": "1",
     "options": {},
     "isEnum": false
    },
    {
     "name": "y",
     "description": "The amount to scale the model in the y direction, eg: 1",
     "type": "number",
     "initializer": "1",
     "default": "1",
     "options": {},
     "isEnum": false
    },
    {
     "name": "z",
     "description": "The amount to scale the model in the z direction, eg: 1",
     "type": "number",
     "initializer": "1",
     "default": "1",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "setScale3D(0, 1, 1, 1)",
   "qName": "design.setScale3D"
  },
  "design.setPosition": {
   "kind": 3,
   "namespace": "design",
   "name": "setPosition",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_position",
    "block": "%marker=marker_block|set position x: %x|y: %y|z: %z",
    "blockGap": "8",
    "weight": 92,
    "blockNamespace": "design",
    "inBasicCategory": "true",
    "inlineInputMode": "inline",
    "shim": "design::setPosition",
    "paramHelp": {},
    "jsDoc": "Sets the position of the 3D object that is rendered in relation to the marker. Shapes will automatically have a default position of (0, 0, 0).",
    "_name": "setPosition"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "x",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "y",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "z",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "setPosition(0, 0, 0, 0)",
   "qName": "design.setPosition"
  },
  "design.setRotation": {
   "kind": 3,
   "namespace": "design",
   "name": "setRotation",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_rotation",
    "block": "%marker=marker_block|set rotation %degrees|°",
    "blockGap": "8",
    "weight": 93,
    "blockNamespace": "design",
    "inBasicCategory": "true",
    "inlineInputMode": "inline",
    "shim": "design::setRotation",
    "paramHelp": {},
    "jsDoc": "Sets the rotation of the 3D object that is rendered in relation to the marker. Shapes will automatically have a default rotation of 0°.",
    "_name": "setRotation"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "degrees",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "setRotation(0, 0)",
   "qName": "design.setRotation"
  },
  "design.setRotation3D": {
   "kind": 3,
   "namespace": "design",
   "name": "setRotation3D",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_rotation_3d",
    "block": "%marker=marker_block|set rotation x: %x|° y: %y|° z: %z|°",
    "blockGap": "8",
    "blockNamespace": "design",
    "advanced": true,
    "inlineInputMode": "inline",
    "shim": "design::setRotation3D",
    "paramHelp": {},
    "jsDoc": "Sets the rotation of the 3D object that is rendered in relation to the marker. Shapes will automatically have a default rotation of (0, 0, 0).",
    "_name": "setRotation3D"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "x",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "y",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "z",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "setRotation3D(0, 0, 0, 0)",
   "qName": "design.setRotation3D"
  },
  "design.addFilter": {
   "kind": 3,
   "namespace": "design",
   "name": "addFilter",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_add_filter",
    "block": "add filter %filter",
    "blockGap": "8",
    "weight": 91,
    "blockNamespace": "design",
    "inBasicCategory": "true",
    "inlineInputMode": "inline",
    "shim": "design::addFilter",
    "paramHelp": {},
    "jsDoc": "Sets the filter of the video feed.",
    "_name": "addFilter"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "filter",
     "description": "",
     "type": "Filter",
     "options": {},
     "isEnum": true
    }
   ],
   "snippet": "addFilter(null)",
   "qName": "design.addFilter"
  },
  "design.removeFilter": {
   "kind": 3,
   "namespace": "design",
   "name": "removeFilter",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_remove_filter",
    "block": "remove filter %filter",
    "blockGap": "8",
    "weight": 90,
    "blockNamespace": "design",
    "inBasicCategory": "true",
    "inlineInputMode": "inline",
    "shim": "design::removeFilter",
    "paramHelp": {},
    "jsDoc": "Sets the filter of the video feed.",
    "_name": "removeFilter"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "filter",
     "description": "",
     "type": "Filter",
     "options": {},
     "isEnum": true
    }
   ],
   "snippet": "removeFilter(null)",
   "qName": "design.removeFilter"
  },
  "interaction": {
   "kind": 5,
   "namespace": "",
   "name": "interaction",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 92,
    "icon": "",
    "color": "#FF5722",
    "paramHelp": {},
    "jsDoc": "Motion",
    "block": "interaction"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "interaction"
  },
  "interaction.onEvent": {
   "kind": 3,
   "namespace": "interaction",
   "name": "onEvent",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_on_event",
    "block": "on %marker=marker_block|%event |do",
    "blockGap": "8",
    "paramFieldEditor": {
     "event": "gridpicker"
    },
    "paramFieldEditorOptions": {
     "event": {
      "width": "400",
      "columns": "4",
      "tooltips": "true"
     }
    },
    "weight": 99,
    "shim": "interaction::onEvent",
    "paramHelp": {
     "marker": "@param event "
    },
    "jsDoc": "Allows use to define callbacks for a marker event",
    "_name": "onEvent"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "@param event ",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "event",
     "description": "",
     "type": "MarkerEvent",
     "options": {},
     "isEnum": true
    },
    {
     "name": "handler",
     "description": "",
     "type": "() => void",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "onEvent(0, null, function () {})",
   "qName": "interaction.onEvent"
  },
  "interaction.whileEvent": {
   "kind": 3,
   "namespace": "interaction",
   "name": "whileEvent",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_while_event",
    "block": "while %marker=marker_block|%event |do",
    "blockGap": "8",
    "paramFieldEditor": {
     "event": "gridpicker"
    },
    "paramFieldEditorOptions": {
     "event": {
      "width": "400",
      "columns": "4",
      "tooltips": "true"
     }
    },
    "weight": 97,
    "shim": "interaction::whileEvent",
    "paramHelp": {
     "marker": "@param event "
    },
    "jsDoc": "Allows use to define callbacks for a marker event",
    "_name": "whileEvent"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "@param event ",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "event",
     "description": "",
     "type": "MarkerLoopEvent",
     "options": {},
     "isEnum": true
    },
    {
     "name": "handler",
     "description": "",
     "type": "() => void",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "whileEvent(0, null, function () {})",
   "qName": "interaction.whileEvent"
  },
  "interaction.whileMultiEvent": {
   "kind": 3,
   "namespace": "interaction",
   "name": "whileMultiEvent",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_while_multi_event",
    "block": "while %marker1=marker_block|%event |%marker2=marker_block |do",
    "blockGap": "8",
    "paramFieldEditor": {
     "event": "gridpicker"
    },
    "paramFieldEditorOptions": {
     "event": {
      "width": "400",
      "columns": "4",
      "tooltips": "true"
     }
    },
    "inlineInputMode": "inline",
    "weight": 96,
    "shim": "interaction::whileMultiEvent",
    "paramHelp": {
     "marker1": "@param marker2 ",
     "event": ""
    },
    "jsDoc": "Allows user to define callbacks that fire while the multi marker event is true",
    "_name": "whileMultiEvent"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker1",
     "description": "@param marker2 ",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "event",
     "description": "",
     "type": "MultiMarkerEvent",
     "options": {},
     "isEnum": true
    },
    {
     "name": "marker2",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "handler",
     "description": "",
     "type": "() => void",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "whileMultiEvent(0, null, 0, function () {})",
   "qName": "interaction.whileMultiEvent"
  },
  "interaction.onMultiEvent": {
   "kind": 3,
   "namespace": "interaction",
   "name": "onMultiEvent",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_on_multi_event",
    "block": "on %marker1=marker_block|%event |%marker2=marker_block |do",
    "blockGap": "8",
    "paramFieldEditor": {
     "event": "gridpicker"
    },
    "paramFieldEditorOptions": {
     "event": {
      "width": "400",
      "columns": "4",
      "tooltips": "true"
     }
    },
    "inlineInputMode": "inline",
    "weight": 98,
    "shim": "interaction::onMultiEvent",
    "paramHelp": {
     "marker1": "@param marker2 ",
     "event": ""
    },
    "jsDoc": "Allows user to define callbacks that trigger once when the multi marker event is true",
    "_name": "onMultiEvent"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker1",
     "description": "@param marker2 ",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "event",
     "description": "",
     "type": "MultiMarkerEvent",
     "options": {},
     "isEnum": true
    },
    {
     "name": "marker2",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "handler",
     "description": "",
     "type": "() => void",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "onMultiEvent(0, null, 0, function () {})",
   "qName": "interaction.onMultiEvent"
  },
  "markers": {
   "kind": 5,
   "namespace": "",
   "name": "markers",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 89,
    "icon": "",
    "color": "#9239ff",
    "paramHelp": {},
    "jsDoc": "Augment Reality markers",
    "block": "markers"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "markers"
  },
  "markers.distance": {
   "kind": 3,
   "namespace": "markers",
   "name": "distance",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_get_dist",
    "block": "distance from %marker1=marker_block| to %marker2=marker_block",
    "blockGap": "8",
    "weight": 97,
    "shim": "markers::distance",
    "paramHelp": {},
    "jsDoc": "Gets the distance between the centers of 2 markers",
    "_name": "distance"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "marker1",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "marker2",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "distance(0, 0)",
   "qName": "markers.distance"
  },
  "markers.position": {
   "kind": 3,
   "namespace": "markers",
   "name": "position",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_get_pos",
    "block": "%marker=marker_block|position %axis",
    "blockGap": "8",
    "weight": 99,
    "shim": "markers::position",
    "paramHelp": {},
    "jsDoc": "Gets the x, y, z positional coordinates of a marker",
    "_name": "position"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "axis",
     "description": "",
     "type": "Axes",
     "options": {},
     "isEnum": true
    }
   ],
   "snippet": "position(0, null)",
   "qName": "markers.position"
  },
  "markers.rotation": {
   "kind": 3,
   "namespace": "markers",
   "name": "rotation",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_get_rot",
    "block": "%marker=marker_block|rotation %axis",
    "blockGap": "8",
    "weight": 98,
    "shim": "markers::rotation",
    "paramHelp": {},
    "jsDoc": "Gets the x, y, z rotational values of a marker",
    "_name": "rotation"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "axis",
     "description": "",
     "type": "Axes",
     "options": {},
     "isEnum": true
    }
   ],
   "snippet": "rotation(0, null)",
   "qName": "markers.rotation"
  },
  "markers.mapPosition": {
   "kind": 3,
   "namespace": "markers",
   "name": "mapPosition",
   "attributes": {
    "paramDefl": {
     "out_min": "0",
     "out_max": "100"
    },
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_map_pos",
    "block": "%marker=marker_block|map position %axis|from %out_min|to %out_max",
    "blockGap": "8",
    "weight": 96,
    "inlineInputMode": "inline",
    "shim": "markers::mapPosition",
    "paramHelp": {
     "out_min": "The lower end of the range to map to, eg: 0",
     "out_max": "The upper end of the range to map to, eg: 100"
    },
    "jsDoc": "Maps the x, y, or z position of a marker to a specified range.",
    "_name": "mapPosition"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "axis",
     "description": "",
     "type": "Axes",
     "options": {},
     "isEnum": true
    },
    {
     "name": "out_min",
     "description": "The lower end of the range to map to, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "out_max",
     "description": "The upper end of the range to map to, eg: 100",
     "type": "number",
     "initializer": "100",
     "default": "100",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "mapPosition(0, null, 0, 100)",
   "qName": "markers.mapPosition"
  },
  "markers.mapRotation": {
   "kind": 3,
   "namespace": "markers",
   "name": "mapRotation",
   "attributes": {
    "paramDefl": {
     "out_min": "0",
     "out_max": "100"
    },
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_map_rot",
    "block": "%marker=marker_block|map rotation from %out_min|to %out_max",
    "blockGap": "8",
    "weight": 95,
    "inlineInputMode": "inline",
    "shim": "markers::mapRotation",
    "paramHelp": {
     "out_min": "The lower end of the range to map to, eg: 0",
     "out_max": "The upper end of the range to map to, eg: 100"
    },
    "jsDoc": "Maps the x, y, or z position of a marker to a specified range. When you rotate the marker, the lowest value will be when the marker is in it's normal orientation and will get higher as you turn it clockwise.",
    "_name": "mapRotation"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "out_min",
     "description": "The lower end of the range to map to, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "out_max",
     "description": "The upper end of the range to map to, eg: 100",
     "type": "number",
     "initializer": "100",
     "default": "100",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "mapRotation(0, 0, 100)",
   "qName": "markers.mapRotation"
  },
  "markers.slider": {
   "kind": 3,
   "namespace": "markers",
   "name": "slider",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_slider",
    "block": "slider %marker1=marker_block|from %marker2=marker_block|to %marker3=marker_block",
    "blockGap": "8",
    "weight": 94,
    "shim": "markers::slider",
    "paramHelp": {},
    "jsDoc": "Maps the value of 1 marker in relation to its distance between 2 markers.",
    "_name": "slider"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "marker1",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "marker2",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "marker3",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "slider(0, 0, 0)",
   "qName": "markers.slider"
  },
  "messaging": {
   "kind": 5,
   "namespace": "",
   "name": "messaging",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "color": "#6657b2",
    "icon": "",
    "weight": 88,
    "paramHelp": {},
    "jsDoc": "Messaging",
    "block": "messaging"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "messaging"
  },
  "messaging.send": {
   "kind": 3,
   "namespace": "messaging",
   "name": "send",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "peer_block",
    "block": "send key %key| value %value| to %id",
    "blockNamespace": "messaging",
    "inBasicCategory": "true",
    "weight": 100,
    "shim": "messaging::send",
    "paramHelp": {
     "id": "The value of the marker"
    },
    "jsDoc": "Peer",
    "_name": "send"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "key",
     "description": "",
     "type": "string",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "id",
     "description": "The value of the marker",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "send(\"\", 0, \"\")",
   "qName": "messaging.send"
  },
  "messaging.receive": {
   "kind": 3,
   "namespace": "messaging",
   "name": "receive",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "peer_receive",
    "block": "when I receive key %key|do",
    "blockGap": "8",
    "blockNamespace": "messaging",
    "inBasicCategory": "true",
    "weight": 99,
    "shim": "messaging::receive",
    "paramHelp": {
     "key": ""
    },
    "jsDoc": "Allows user to define callbacks for receive event",
    "_name": "receive"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "key",
     "description": "",
     "type": "string",
     "options": {},
     "isEnum": false
    },
    {
     "name": "handler",
     "description": "",
     "type": "() => void",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "receive(\"\", function () {})",
   "qName": "messaging.receive"
  },
  "paint": {
   "kind": 5,
   "namespace": "",
   "name": "paint",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "icon": "",
    "color": "#e00d0d",
    "paramHelp": {},
    "jsDoc": "Paint",
    "block": "paint"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "paint"
  },
  "paint.setBrushMode": {
   "kind": 3,
   "namespace": "paint",
   "name": "setBrushMode",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_brush_mode",
    "block": "%marker=marker_block|set brush %val",
    "blockGap": "8",
    "blockNamespace": "paint",
    "inBasicCategory": "true",
    "inlineInputMode": "inline",
    "shim": "paint::setBrushMode",
    "paramHelp": {},
    "jsDoc": "Use a marker as an AR paintbrush..",
    "_name": "setBrushMode"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "val",
     "description": "",
     "type": "Toggle",
     "options": {},
     "isEnum": true
    }
   ],
   "snippet": "setBrushMode(0, null)",
   "qName": "paint.setBrushMode"
  },
  "paint.setBrushColor": {
   "kind": 3,
   "namespace": "paint",
   "name": "setBrushColor",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_set_brush_color",
    "block": "%marker=marker_block|set brush color %color=colors_named",
    "blockGap": "8",
    "blockNamespace": "paint",
    "inBasicCategory": "true",
    "inlineInputMode": "inline",
    "shim": "paint::setBrushColor",
    "paramHelp": {},
    "jsDoc": "Set the color of your AR paintbrush.",
    "_name": "setBrushColor"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "color",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "setBrushColor(0, 0)",
   "qName": "paint.setBrushColor"
  },
  "paint.clearBrushStrokes": {
   "kind": 3,
   "namespace": "paint",
   "name": "clearBrushStrokes",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "ar_clear_brush_strokes",
    "block": "%marker=marker_block|clear brush strokes",
    "blockGap": "8",
    "blockNamespace": "paint",
    "inBasicCategory": "true",
    "inlineInputMode": "inline",
    "shim": "paint::clearBrushStrokes",
    "paramHelp": {},
    "jsDoc": "Clear all strokes made by your AR paintbrush.",
    "_name": "clearBrushStrokes"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "marker",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "clearBrushStrokes(0)",
   "qName": "paint.clearBrushStrokes"
  },
  "markers.marker": {
   "kind": 3,
   "namespace": "markers",
   "name": "marker",
   "attributes": {
    "paramDefl": {
     "marker": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "blockId": "marker_block",
    "block": "%marker",
    "weight": 100,
    "paramFieldEditor": {
     "marker": "imagedropdown"
    },
    "paramFieldEditorOptions": {
     "marker": {
      "width": "250",
      "columns": "4",
      "itemColour": "black",
      "tooltips": "true",
      "decompileLiterals": "true"
     }
    },
    "shim": "TD_ID",
    "useEnumVal": "1",
    "paramHelp": {
     "marker": "The value of the marker"
    },
    "jsDoc": "An augmented reality marker",
    "_name": "marker"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "marker",
     "description": "The value of the marker",
     "type": "MarkerCode",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": true
    }
   ],
   "snippet": "marker(0)",
   "qName": "markers.marker"
  },
  "models": {
   "kind": 5,
   "namespace": "",
   "name": "models",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 88,
    "icon": "",
    "color": "#4d03a3",
    "paramHelp": {},
    "jsDoc": "Models",
    "_name": "models"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "models"
  }
 }
}